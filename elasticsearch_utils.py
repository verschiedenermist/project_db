# -*- coding: utf-8 -*-
"""elasticsearch_utils

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12a05fOzrgwYrb4Lgs7e7sLynLSz_xbzF
"""

from elasticsearch import Elasticsearch
from transformer_utils import get_embedding
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
import zipfile

def create_es_client():
    return Elasticsearch([{'host': 'localhost', 'port': 9200, 'scheme': 'http'}])

es = create_es_client()

try:
    es.ping()
    print("Elasticsearch is reachable")
except Exception as e:
    print(f"Error connecting to Elasticsearch: {e}")

with zipfile.ZipFile('movies_metadata.csv.zip', 'r') as zip_ref:
    zip_ref.extract('movies_metadata.csv', 'data')

data = pd.read_csv('data/movies_metadata.csv', low_memory=False)
data = data[['original_title', 'overview']].dropna(subset=['overview'])

tfidf_vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf_vectorizer.fit_transform(data['overview'])

# индексация данных в Elasticsearch
def insert_data_to_elasticsearch():
    for i, row in data.iterrows():
        movie_id = row['original_title']
        overview = row['overview']

        # эмбеддинги для текста
        embedding = get_embedding(overview)

        tfidf_vector = tfidf_vectorizer.transform([overview]).toarray()[0]
        es.index(index="movies_tfidf", id=i, body={
            "title": movie_id,
            "overview": overview,
            "tfidf_vector": tfidf_vector.tolist()
        })

        # вставка в индекс с эмбеддингами
        es.index(index="movies_embeddings", id=i, body={
            "title": movie_id,
            "overview": overview,
            "embedding": embedding
        })

# функция поиска
def search_movie(query: str, index_type: str):
    query_embedding = get_embedding(query)  # эмбеддинг запроса

    if index_type == "tfidf":
        index = "movies_tfidf"
        query_vector = tfidf_vectorizer.transform([query]).toarray()[0]
        query_body = {
            "query": {
                "script_score": {
                    "query": {"match_all": {}},
                    "script": {
                        "source": "cosineSimilarity(params.query_vector, 'tfidf_vector') + 1.0",
                        "params": {"query_vector": query_vector}
                    }
                }
            }
        }
    else:
        index = "movies_embeddings"
        query_body = {
            "query": {
                "script_score": {
                    "query": {"match_all": {}},
                    "script": {
                        "source": "cosineSimilarity(params.query_vector, 'embedding') + 1.0",
                        "params": {"query_vector": query_embedding}
                    }
                }
            }
        }

    # поиск
    response = es.search(index=index, body=query_body)
    return response['hits']['hits']
    #results = []
    #for hit in response['hits']['hits']:
    #    result = {
    #        "title": hit['_source']['title'],
    #        "overview": hit['_source']['overview'],
    #        "score": hit['_score']
    #    }
    #    results.append(result)
    #
    #return results